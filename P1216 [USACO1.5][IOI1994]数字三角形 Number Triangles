/*
观察下面的数字金字塔。
写一个程序来查找从最高点到底部任意处结束的路径，使路径经过数字的和最大。每一步可以走到左下方的点也可以到达右下方的点。
        7 
      3   8 
    8   1   0 
  2   7   4   4 
4   5   2   6   5 

在上面的样例中,从 7 \to 3 \to 8 \to 7 \to 57→3→8→7→5 的路径产生了最大

输入格式
第一个行一个正整数 rr ,表示行的数目。

后面每行为这个数字金字塔特定行包含的整数。

输出格式
单独的一行,包含那个可能得到的最大的和。
输入输出样例
输入 #1
5
7
3 8
8 1 0
2 7 4 4
4 5 2 6 5 

输出 #1
30


题解
就是简单的dp，每次输入之后就开始找到从上面两点下来的最大值，加上该点的值就是了，注意的就是遍历的时候，前面的遍历不能影响后面的遍历
*/
···
#include <iostream>
#include <algorithm>

using namespace std;
const int maxn=1e5+5;
int a[maxn];
int main()
{
	int n;
	cin>>n;
	for(int i=n;i>=1;i--){ 
		for(int j=i;j<=n;j++){ //必须从前面开始遍历，因为这样不会影响后面的判断。
			int val;
			cin>>val;
			a[j]=max(a[j],a[j+1])+val;
		}
	}
	int ans=0;
	for(int i=1;i<=n;i++){
//		cout<<a[i]<<" ";
		ans=max(ans,a[i]);
	}
	cout<<ans<<endl;
	return 0;
 } 

···


代码
