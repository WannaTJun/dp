/*
题目
给定一个字符串S，字符串S的长度为M(M≤2000)，字符串S所含有的字符的种类的数量为N(N≤26)，然后给定这N种字符Add与Delete的代价，求将S变为回文串的最小代价和。

输入
第一行：两个由空格分隔的整数 N 和 M

第二行：这一行给出了恰好 M 个字符，表示初始状态下的ID字符串

接下来的 N 行：每一行给出了由空格分隔的三部分。首先是一个字符，保证出现在了输入的字符串中。接下来是两个整数，表示你增添这个字符的代价，然后是删除这个字符的代价

输出
你只需要输出一行，且只输出一个整数。表示你将给定字符串变成回文串所需的最小代价。

题解
一开始看题目的时候，还想着要怎么删除然后添加，后来发现无论是添加还是删除，最后都是要变成一个回文串。
那么添加的删除操作得到的结果都是一样的。即选择两种操作里面代价小的就行。
dp[i][j]表示i到j形成回文串的最小代价
*/

```
#include <iostream>
#include <algorithm>

using namespace std;
int n,m;
char s[10005];
int dp[5005][5005];
int val[5005];
int main()
{
	cin>>n>>m;
	cin>>(s+1);
	for(int i=0;i<n;i++){
//		cout<<1<<endl;
		char c;
		cin>>c;
		int b=c-'a';
		int x,y;
		cin>>x>>y;
		val[b]=min(x,y);
	}
	for(int i=m;i>0;i--){
		for(int j=i+1;j<=m;j++){
			if(s[i]==s[j]){
				dp[i][j]=dp[i+1][j-1];
			}else{
				dp[i][j]=min(dp[i+1][j]+val[s[i]-'a'],dp[i][j-1]+val[s[j]-'a']);
			}
		}
	}
	cout<<dp[1][m]<<endl;
	return 0;
 } 
```
